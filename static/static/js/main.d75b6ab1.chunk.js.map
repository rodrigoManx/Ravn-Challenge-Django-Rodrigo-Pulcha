{"version":3,"sources":["img/ArrowRight.svg","img/ActivityIndicator.svg","components/Cells.js","components/StarWarsListInfiniteScroll.js","img/BackArrow.svg","components/Header.js","services/StarWarsApiService.js","screens/StarWarsList.js","components/InfoSection.js","components/StarWarsItemDetail.js","screens/StarWarsDetail.js","screens/StarWarsHome.js","App.js","reportWebVitals.js","index.js"],"names":["DataCell","property","value","Fragment","className","style","textAlign","width","LoadingCell","src","ActivityIndicator","NoticeCell","text","ItemCell","data","object","path","pathKey","description","name","to","encodeURI","ArrowRight","StarWarsListInfiniteScroll","useState","page","setPage","locked","setLock","useQuery","query","loading","error","fetchMore","end","setEnd","loader","useRef","useEffect","observer","IntersectionObserver","handleObserver","root","rootMargin","threshold","current","observe","entities","isIntersecting","window","setTimeout","variables","cursor","field","pageInfo","endCursor","then","res","hasNextPage","edges","map","i","node","ref","Header","title","canBack","BackArrow","onClick","history","back","STAR_WARS_PEOPLE","gql","STAR_WARS_STARSHIPS","STAR_WARS_PERSON","STAR_WARS_STARSHIP","OBJECTS","starships","starshipClass","charAt","toUpperCase","slice","people","species","length","homeworld","StarWarsList","props","state","undefined","this","match","params","setState","Component","SectionHeader","InfoSection","sectionTitle","fields","Array","isArray","element","displayName","StarWarsItemDetail","id","screen","generalInformation","relations","relation","index","connection","information","person","starship","StarWarsDetail","LISTS","StarWarsHome","item","cache","InMemoryCache","typePolicies","Query","allPeople","relayStylePagination","allStarships","client","ApolloClient","uri","App","exact","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4UAAe,MAA0B,uCCA1B,MAA0B,8CCMlC,SAASA,EAAT,GAAsC,IAAnBC,EAAkB,EAAlBA,SAAUC,EAAQ,EAARA,MAChC,OACI,eAAC,IAAMC,SAAP,WACI,sBAAKC,UAAW,iBAAhB,UACI,qBAAKC,MAAO,CAACC,UAAW,OAAQC,MAAiB,KAAVL,EAAc,MAAM,QAA3D,SACI,oBAAIE,UAAW,eAAf,SAAgCH,MAGtB,KAAVC,EACI,qBAAKG,MAAO,CAACC,UAAW,QAASC,MAAO,OAAxC,SACI,6BAAKL,MAET,2BAGZ,0BAKL,SAASM,IACZ,OACI,sBAAKJ,UAAW,oBAAhB,UACI,qBAAKA,UAAW,qBAAsBK,IAAKC,IAC3C,oBAAIN,UAAW,eAAf,wBAKL,SAASO,EAAT,GAA6B,IAARC,EAAO,EAAPA,KACxB,OACI,qBAAKR,UAAW,OAAhB,SACI,oBAAIA,UAAW,gBAAf,SAAiCQ,MAKtC,SAASC,EAAT,GAAmC,IAAhBC,EAAe,EAAfA,KAAMC,EAAS,EAATA,OACtBC,EAAO,iBAAmBD,EAAOE,SAAWH,EAAKC,EAAOE,SAAUF,EAAOC,KAAOF,EAAKC,EAAOE,SAAWH,EAAKE,MAC5GE,EAAcH,EAAOG,YAAaH,EAAOG,YAAYJ,GAAQA,EAAKI,YACxE,OACIJ,EAAKK,MAAQH,EACT,cAAC,IAAD,CAAMI,GAAIC,UAAUL,GAApB,SACI,sBAAKZ,UAAW,iBAAhB,UACI,8BACI,eAAC,IAAMD,SAAP,WACI,6BAAKW,EAAKK,OACV,oBAAGf,UAAW,eAAd,cAAiCc,EAAjC,YAGR,qBAAKd,UAAW,mBAAoBK,IAAKa,SAGjD,wBCrDL,SAASC,EAAT,GAA+C,IAAVR,EAAS,EAATA,OAAS,EACzBS,mBAAS,GADgB,mBAC1CC,EAD0C,KACpCC,EADoC,OAEvBF,oBAAS,GAFc,mBAE1CG,EAF0C,KAElCC,EAFkC,OAGLC,mBAASd,EAAOe,OAApDC,EAHyC,EAGzCA,QAASC,EAHgC,EAGhCA,MAAOlB,EAHyB,EAGzBA,KAAMmB,EAHmB,EAGnBA,UAHmB,EAI3BT,oBAAS,GAJkB,mBAI1CU,EAJ0C,KAIrCC,EAJqC,KAK3CC,EAASC,iBAAO,MAEtBC,qBAAU,WACN,IAAKX,EAAO,CACR,IAKMY,EAAW,IAAIC,qBAAqBC,EAL1B,CACZC,KAAM,KACNC,WAAY,MACZC,UAAW,KAGXR,EAAOS,SACPN,EAASO,QAAQV,EAAOS,aAKpC,IAAMJ,EAAiB,SAACM,GACLA,EAAS,GAEbC,iBACPpB,GAAQ,GACRF,EAAQD,EAAO,GACfwB,OAAOC,YAAW,WACThB,GACDN,GAAQ,KAEb,OAoBX,OAhBAU,qBAAU,WACFxB,GACAmB,EAAU,CACNkB,UAAW,CACPC,OAAQtC,EAAKC,EAAOsC,OAAOC,SAASC,aAEzCC,MACC,SAACC,GACO3C,EAAKC,EAAOsC,OAAOC,WAAaxC,EAAKC,EAAOsC,OAAOC,SAASI,aAC5DvB,GAAO,QAKxB,CAACV,IAEAM,EAAgB,cAACvB,EAAD,IAChBwB,EAAc,cAACrB,EAAD,CAAYC,KAAM,wBAGhC,gCAEQE,EAAKC,EAAOsC,OAAOM,MAAMC,KAAI,WAAWC,GAAX,IAAGC,EAAH,EAAGA,KAAH,OACzB,cAACjD,EAAD,CAAkBC,KAAMgD,EAAM/C,OAAQA,GAAvB8C,MAIlB3B,EAKG,qBAAK9B,UAAU,UAAU2D,IAAK3B,IAJ9B,qBAAKhC,UAAU,UAAU2D,IAAK3B,EAA9B,SACI,cAAC5B,EAAD,SCtET,UAA0B,sCCGlC,SAASwD,EAAT,GAAmC,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,QAC3B,OACI,sBAAK9D,UAAW,SAAhB,UAEQ8D,EACI,qBAAK9D,UAAW,aAAcK,IAAK0D,EAAWC,QAAS,WAAOnB,OAAOoB,QAAQC,UAE7E,wBAGR,6BAAKL,O,6tDCXV,IAAMM,EAAmBC,cAAH,KA2BhBC,EAAsBD,cAAH,KAkBnBE,EAAmBF,cAAH,KA2BhBG,EAAqBH,cAAH,KCrEzBI,EAAU,CACZC,UAAW,CACP1D,KAAM,YACNW,MAAO2C,EACPpB,MAAO,eACPrC,KAAM,oBACNC,QAAS,KACTC,YAAa,SAACJ,GACV,IAAIgE,EAAgBhE,EAAKgE,cAAehE,EAAKgE,cAAgB,UAE7D,OADAA,EAAgBA,EAAcC,OAAO,GAAGC,cAAgBF,EAAcG,MAAM,IACrD,WAG/BC,OAAQ,CACJ/D,KAAM,SACNW,MAAOyC,EACPlB,MAAO,YACPrC,KAAM,kBACNC,QAAS,KACTC,YAAa,SAACJ,GAGV,OAFaA,EAAKqE,QAAQxB,MAAMyB,OAAS,EAAGtE,EAAKqE,QAAQxB,MAAM,GAAGG,KAAK3C,KAAO,SAE9D,UADAL,EAAKuE,UAAWvE,EAAKuE,UAAUlE,KAAO,eAM7CmE,E,kDAEjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTzE,YAAQ0E,GAHG,E,gEAQXC,KAAKH,MAAMI,MAAMC,OAAO7E,QACxB2E,KAAKG,SAAS,CAAC9E,OAAQ2E,KAAKH,MAAMI,MAAMC,OAAO7E,W,+BAKnD,OACI2E,KAAKF,MAAMzE,OACP,eAAC,IAAMZ,SAAP,WACI,cAAC6D,EAAD,CAAQC,MAAOW,EAAQc,KAAKF,MAAMzE,QAAQI,KAAO,gBAAiB+C,SAAS,IAC3E,cAAC3C,EAAD,CAA4BR,OAAQ6D,EAAQc,KAAKF,MAAMzE,aAG3D,4B,GAvB0B+E,aC7B1C,SAASC,EAAT,GAAiC,IAAT9B,EAAQ,EAARA,MACpB,OACI,qBAAK7D,UAAW,iBAAhB,SACI,6BAAK6D,MAKV,SAAS+B,EAAT,GAAoD,IAA9BC,EAA6B,EAA7BA,aAAcnF,EAAe,EAAfA,KAAMoF,EAAS,EAATA,OAC7C,OACI,gCACI,cAACH,EAAD,CAAe9B,MAAOgC,IAElBE,MAAMC,QAAQtF,GACVA,EAAK8C,KAAI,SAACyC,EAASxC,GAAV,OACL,cAAC7D,EAAD,CAAkBE,MAAM,GAAGD,SAAUoG,EAAO,KAASH,IAAtCrC,MAGnBqC,EAAOtC,KAAI,SAACyC,EAASxC,GAAV,OACP,cAAC7D,EAAD,CAAkBC,SAAUoG,EAAQC,YAAapG,MAAOY,EAAKuF,EAAQpG,WAAtD4D,SChBhC,SAAS0C,EAAT,GAAmD,IAAtBC,EAAqB,EAArBA,GAAIzF,EAAiB,EAAjBA,OAAiB,KAAT0F,OACX5E,mBAASd,EAAOe,MAAO,CACpDqB,UAAW,CACPqD,GAAIA,MAFJzE,EAD6C,EAC7CA,QAASC,EADoC,EACpCA,MAAOlB,EAD6B,EAC7BA,KAMxB,OAAIiB,EACA,eAAC,IAAM5B,SAAP,WACI,cAAC6D,EAAD,CAAQC,MAAO,GAAIC,SAAS,IAAO,cAAC1D,EAAD,OAGvCwB,EACA,cAAC,IAAM7B,SAAP,UACI,cAACQ,EAAD,CAAYC,KAAM,0BAKtB,gCACI,cAACoD,EAAD,CAAQC,MAAOnD,EAAKC,EAAOI,MAAMA,KAAM+C,SAAS,IAChD,cAAC8B,EAAD,CAAaC,aAAa,sBAAsBnF,KAAMA,EAAKC,EAAOI,MAAO+E,OAAQnF,EAAO2F,qBAEpF3F,EAAO4F,UAAU/C,KAAI,SAACgD,EAAUC,GAAX,OACjB,cAACb,EAAD,CAEIC,aAAcW,EAASN,YACvBxF,KAAMA,EAAKC,EAAOI,MAAMyF,EAASE,YAA3B,MAAiDZ,OAAQU,EAASG,aAFnEF,SC1B7B,IAAMjC,EAAU,CACZoC,OAAQ,CACJ7F,KAAM,SACNW,MAAO4C,EACPiC,UAAW,CACP,CAACG,WAAY,WAAY3F,KAAM,WAAY4F,YAAa,OAAQT,YAAa,YAC7E,CAACQ,WAAY,YAAa3F,KAAM,YAAa4F,YAAa,OAAQT,YAAa,cAEnFI,mBAAoB,CAChB,CAAEzG,SAAU,WAAYqG,YAAa,aACrC,CAAErG,SAAU,YAAaqG,YAAa,cACtC,CAAErG,SAAU,YAAaqG,YAAa,cACtC,CAAErG,SAAU,YAAaqG,YAAa,gBAG9CW,SAAU,CACN9F,KAAM,WACNW,MAAO6C,EACPgC,UAAW,CACP,CAACG,WAAY,SAAU3F,KAAM,SAAU4F,YAAa,OAAQT,YAAa,UACzE,CAACQ,WAAY,QAAS3F,KAAM,QAAS4F,YAAa,QAAST,YAAa,UAE5EI,mBAAoB,CAChB,CAAEzG,SAAU,QAASqG,YAAa,SAClC,CAAErG,SAAU,gBAAiBqG,YAAa,mBAC1C,CAAErG,SAAU,SAAUqG,YAAa,UACnC,CAAErG,SAAU,OAAQqG,YAAa,QACjC,CAAErG,SAAU,gBAAiBqG,YAAa,eAMjCY,E,kDAEjB,WAAY3B,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTrE,UAAMsE,EACNe,QAAIf,EACJ1E,YAAQ0E,GALG,E,gEAUXC,KAAKH,MAAMI,MAAMC,OAAO7E,QAAU2E,KAAKH,MAAMI,MAAMC,OAAOY,IAC1Dd,KAAKG,SAAS,CACV9E,OAAQ2E,KAAKH,MAAMI,MAAMC,OAAO7E,OAChCyF,GAAId,KAAKH,MAAMI,MAAMC,OAAOY,O,+BAMpC,OACId,KAAKF,MAAMzE,QAAU2E,KAAKF,MAAMgB,GAC5B,cAAC,IAAMrG,SAAP,UACI,cAACoG,EAAD,CACIC,GAAId,KAAKF,MAAMgB,GACfzF,OAAQ6D,EAAQc,KAAKF,MAAMzE,QAC3B0F,OAAQf,SAIhB,4B,GA/B4BI,aClCtCqB,EAAQ,CACV,CACIhG,KAAM,wBACNH,KAAM,iBAEV,CACIG,KAAM,2BACNH,KAAM,qBAIOoG,E,kDAEjB,WAAY7B,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,GAFE,E,kGAUf,OACI,eAAC,IAAMrF,SAAP,WACI,cAAC6D,EAAD,CAAQC,MAAM,YAAYC,SAAS,IAE/BiD,EAAMvD,KAAI,SAACyD,EAAMR,GAAP,OACN,cAAChG,EAAD,CAAsBC,KAAMuG,EAAMtG,OAAQ,IAA3B8F,a,GAjBGf,aCNpCwB,EAAQ,IAAIC,gBAAc,CAC9BC,aAAc,CACZC,MAAO,CACLvB,OAAQ,CACNwB,UAAWC,cACXC,aAAcD,mBAOhBE,EAAS,IAAIC,eAAa,CAC9BC,IAAK,gCAELT,MAAOA,IAsBMU,MAlBf,WACE,OACE,cAAC,iBAAD,CAAgBH,OAAQA,EAAxB,SACE,cAAC,IAAD,UACE,qBAAKzH,UAAU,MAAf,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAO6H,OAAK,EAACjH,KAAK,gBAAgBkH,UAAWd,IAC7C,cAAC,IAAD,CAAOa,OAAK,EAACjH,KAAK,6BAA6BkH,UAAW5C,IAC1D,cAAC,IAAD,CAAO2C,OAAK,EAACjH,KAAK,mCAAmCkH,UAAWhB,cCxB7DiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB7E,MAAK,YAAkD,IAA/C8E,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.d75b6ab1.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/ArrowRight.1b02fef7.svg\";","export default __webpack_public_path__ + \"static/media/ActivityIndicator.014e4797.svg\";","import React from 'react';\nimport ArrowRight from '../img/ArrowRight.svg';\nimport ActivityIndicator from '../img/ActivityIndicator.svg';\nimport { Link } from 'react-router-dom';\n\n\nexport function DataCell({property, value}) {\n    return (\n        <React.Fragment>\n            <div className={\"cell data-cell\"}>\n                <div style={{textAlign: \"left\", width: value !== \"\"? \"50%\":\"100%\"}}>\n                    <h2 className={\"low-emphasis\"}>{property}</h2>\n                </div>\n                {\n                    value !== \"\"? (\n                        <div style={{textAlign: \"right\", width: \"50%\"}}>\n                            <h2>{value}</h2>\n                        </div>\n                    ): (<div/>)\n                }\n            </div>\n            <hr/>\n        </React.Fragment>\n    )\n}\n\nexport function LoadingCell() {\n    return (\n        <div className={\"cell loading-cell\"}>\n            <img className={\"activity-indicator\"} src={ActivityIndicator}/>\n            <h2 className={\"low-emphasis\"}>Loading</h2>\n        </div>\n    )\n}\n\nexport function NoticeCell({text}) {\n    return (\n        <div className={\"cell\"}>\n            <h2 className={\"high-emphasis\"}>{text}</h2>\n        </div>\n    )\n}\n\nexport function ItemCell({data, object}) {\n    const path = \"/graphql-mode\" + (object.pathKey && data[object.pathKey]? object.path + data[object.pathKey] : data.path);\n    const description = object.description? object.description(data) : data.description;\n    return (\n        data.name && path?(\n            <Link to={encodeURI(path)}>\n                <div className={\"cell item-cell\"}>\n                    <div>\n                        <React.Fragment>\n                            <h2>{data.name}</h2>\n                            <p className={\"low-emphasis\"}> { description } </p>\n                        </React.Fragment>        \n                    </div>\n                    <img className={\"cell-arrow-right\"} src={ArrowRight}/>\n                </div>\n            </Link>\n        ):( <div/> )\n    )\n}","import { useQuery } from '@apollo/client';\nimport React, { useEffect, useState, useRef } from 'react';\nimport { NoticeCell, LoadingCell, ItemCell } from \"./Cells\"\n\n\n\nexport function StarWarsListInfiniteScroll({object}) {\n    const [page, setPage] = useState(1);\n    const [locked, setLock] = useState(false);\n    const { loading, error, data, fetchMore } = useQuery(object.query);\n    const [end, setEnd] = useState(false);\n    const loader = useRef(null);\n\n    useEffect(() => {\n        if (!locked){\n            const options = {\n                root: null,\n                rootMargin: '0px',\n                threshold: 0.2\n              }\n            const observer = new IntersectionObserver(handleObserver, options);\n            if (loader.current) {\n                observer.observe(loader.current)\n             }\n        }\n    });\n\n    const handleObserver = (entities) => {\n        const target = entities[0];\n        \n        if (target.isIntersecting) { \n            setLock(true);\n            setPage(page + 1);\n            window.setTimeout(() => {\n                if (!end) {\n                    setLock(false);\n                }\n            }, 500);\n        }\n    }\n\n    useEffect(() => {\n        if (data) {\n            fetchMore({\n                variables: {\n                    cursor: data[object.field].pageInfo.endCursor,\n                },\n            }).then(\n                (res) => {\n                    if (data[object.field].pageInfo && !data[object.field].pageInfo.hasNextPage) {\n                        setEnd(true);\n                    }\n                }\n            )\n        }\n    }, [page])\n\n    if (loading) return <LoadingCell/>;\n    if (error) return <NoticeCell text={\"Failed to Load Data\"}/>;\n\n    return (\n        <div>\n            {\n                data[object.field].edges.map(({ node }, i) => (\n                    <ItemCell key={i} data={node} object={object}/>\n                ))\n            }\n            {\n                !end? (\n                    <div className=\"loading\" ref={loader}>\n                        <LoadingCell/>\n                    </div>\n                ):(\n                    <div className=\"loading\" ref={loader}></div>\n                )\n            }\n            \n        </div>\n        \n    )\n}\n","export default __webpack_public_path__ + \"static/media/BackArrow.9f2db49f.svg\";","import BackArrow from '../img/BackArrow.svg';\n\n\nexport function Header({title, canBack}) {\n    return (\n        <div className={\"header\"}>\n            {\n                canBack?(\n                    <img className={\"back-arrow\"} src={BackArrow} onClick={() => {window.history.back()}}/>\n                ):(\n                    <div/>\n                )\n            }\n            <h2>{title}</h2>\n        </div>\n    )\n}\n","import { gql } from '@apollo/client';\n\nexport const STAR_WARS_PEOPLE = gql`\n  query StarWarsPeople($cursor: String){\n    allPeople(first: 5, after: $cursor) {\n      edges{\n        node{\n            id\n            name\n            species {\n              edges {\n                node {\n                  name\n                }\n              }\n            }\n            homeworld {\n              name\n            }\n        }\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    } \n  }\n`;\n\nexport const STAR_WARS_STARSHIPS = gql`\n  query StarWarsStarships($cursor: String){\n    allStarships(first: 5, after: $cursor) {\n      edges{\n        node{\n            id\n            name\n            starshipClass\n        }\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    } \n  }\n`;\n\nexport const STAR_WARS_PERSON = gql`\n  query Person($id: ID!){\n    person(id: $id){\n      name\n      gender\n      hairColor\n      eyeColor\n      skinColor\n      birthYear\n      starships {\n        edges {\n          node {\n            name\n          }\n        }\n      }\n      vehicles {\n        edges {\n          node {\n            name\n          }\n        }\n      }\n    } \n  }\n`;\n\nexport const STAR_WARS_STARSHIP = gql`\n  query Starship($id: ID!){\n    starship(id: $id){\n      name\n      model\n      costInCredits\n      length\n      crew\n      cargoCapacity\n      films {\n        edges {\n          node {\n            title\n          }\n        }\n      }\n      pilots {\n        edges {\n          node {\n            name\n          }\n        }\n      }\n    } \n  }\n`;","import React, { Component } from 'react';\nimport { StarWarsListInfiniteScroll } from '../components/StarWarsListInfiniteScroll';\nimport { Header } from '../components/Header';\nimport { STAR_WARS_PEOPLE, STAR_WARS_STARSHIPS } from '../services/StarWarsApiService';\n\nconst OBJECTS = {\n    starships: {\n        name: \"Starships\",\n        query: STAR_WARS_STARSHIPS,\n        field: \"allStarships\",\n        path: \"/detail/starship/\",\n        pathKey: \"id\",\n        description: (data) => {\n            let starshipClass = data.starshipClass? data.starshipClass : \"Unknown\";\n            starshipClass = starshipClass.charAt(0).toUpperCase() + starshipClass.slice(1)\n            return starshipClass + \" class\";\n        }\n    },\n    people: {\n        name: \"People\",\n        query: STAR_WARS_PEOPLE,\n        field: \"allPeople\",\n        path: \"/detail/person/\",\n        pathKey: \"id\",\n        description: (data) => {\n            let specie = data.species.edges.length > 0? data.species.edges[0].node.name : \"Human\";\n            let homeworld = data.homeworld? data.homeworld.name : \"Tatooine\";\n            return specie + \" from \" + homeworld;\n        }\n    },\n}\n\nexport default class StarWarsList extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            object: undefined\n        };\n    }\n\n    componentDidMount() {\n        if (this.props.match.params.object) {\n            this.setState({object: this.props.match.params.object})\n        }\n    }\n    \n    render() {\n        return (\n            this.state.object?(\n                <React.Fragment>\n                    <Header title={OBJECTS[this.state.object].name + \" of Star Wars\"} canBack={true}/>\n                    <StarWarsListInfiniteScroll object={OBJECTS[this.state.object]}/>\n                </React.Fragment>\n            ):(\n                <div/>\n            )\n        );\n    }\n}","import { DataCell } from \"./Cells\"\n\n\nfunction SectionHeader({title}) {\n    return (\n        <div className={\"section-header\"}>\n            <h2>{title}</h2>\n        </div>\n    )\n}\n\nexport function InfoSection({sectionTitle, data, fields}) {\n    return (\n        <div>\n            <SectionHeader title={sectionTitle}/>\n            {\n                Array.isArray(data)? (\n                    data.map((element, i) => (\n                        <DataCell key={i} value=\"\" property={element['node'][fields]}/>        \n                    ))\n                ):(\n                    fields.map((element, i) => (\n                        <DataCell key={i} property={element.displayName} value={data[element.property]}/>        \n                    ))\n                )\n            }\n        </div>\n    )\n}","import React from 'react';\nimport { useQuery } from '@apollo/client';\nimport { NoticeCell, LoadingCell } from \"./Cells\";\nimport { InfoSection } from \"./InfoSection\";\nimport { Header } from './Header';\n\nexport function StarWarsItemDetail({id, object, screen}) {\n    const { loading, error, data } = useQuery(object.query, {\n        variables: {\n            id: id\n        }\n    });\n\n    if (loading) return (\n        <React.Fragment>\n            <Header title={\"\"} canBack={true}/><LoadingCell/>\n        </React.Fragment>\n    )\n    if (error) return (\n        <React.Fragment>\n            <NoticeCell text={\"Failed to Load Data\"}/>\n        </React.Fragment>\n    )\n    \n    return (\n        <div>\n            <Header title={data[object.name].name} canBack={true}/>\n            <InfoSection sectionTitle=\"General Information\" data={data[object.name]} fields={object.generalInformation} />\n            {\n                object.relations.map((relation, index) => (\n                    <InfoSection\n                        key={index}\n                        sectionTitle={relation.displayName}\n                        data={data[object.name][relation.connection]['edges']} fields={relation.information} />\n                ))\n            }\n        </div>\n    )\n}","import React, { Component } from 'react';\nimport { StarWarsItemDetail } from '../components/StarWarsItemDetail'\nimport { STAR_WARS_PERSON, STAR_WARS_STARSHIP } from '../services/StarWarsApiService';\n\n\nconst OBJECTS = {\n    person: {\n        name: \"person\",\n        query: STAR_WARS_PERSON,\n        relations: [\n            {connection: 'vehicles', name: 'vehicles', information: \"name\", displayName: \"Vehicles\"},\n            {connection: 'starships', name: 'starships', information: \"name\", displayName: \"Starships\"},\n        ],\n        generalInformation: [\n            { property: 'eyeColor', displayName: \"Eye Color\"},\n            { property: 'hairColor', displayName: \"Hair Color\"},\n            { property: 'skinColor', displayName: \"Skin Color\"},\n            { property: 'birthYear', displayName: \"Birth Year\"},\n        ]\n    },\n    starship: {\n        name: \"starship\",\n        query: STAR_WARS_STARSHIP,\n        relations: [\n            {connection: 'pilots', name: 'pilots', information: \"name\", displayName: \"Pilots\"},\n            {connection: 'films', name: 'films', information: \"title\", displayName: \"Films\"},\n        ],\n        generalInformation: [\n            { property: 'model', displayName: \"Model\"},\n            { property: 'costInCredits', displayName: \"Cost in Credits\"},\n            { property: 'length', displayName: \"Length\"},\n            { property: 'crew', displayName: \"Crew\"},\n            { property: 'cargoCapacity', displayName: \"Capacity\"},\n        ] \n    }\n}\n\n\nexport default class StarWarsDetail extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: undefined,\n            id: undefined,\n            object: undefined\n        };\n    }\n\n    componentDidMount() {\n        if (this.props.match.params.object && this.props.match.params.id) {\n            this.setState({\n                object: this.props.match.params.object,\n                id: this.props.match.params.id\n            })\n        }\n    }\n    \n    render() {\n        return (\n            this.state.object && this.state.id? (\n                <React.Fragment>\n                    <StarWarsItemDetail\n                        id={this.state.id}\n                        object={OBJECTS[this.state.object]}\n                        screen={this}\n                    />\n                </React.Fragment>\n            ):(\n                <div/>\n            )\n        );\n    }\n}","import React, { Component } from 'react';\nimport { Header } from '../components/Header';\nimport { ItemCell } from \"../components/Cells\"\n\nconst LISTS = [\n    {\n        name: \"People from Stat Wars\",\n        path: \"/list/people/\",\n    },\n    {\n        name: \"Starships from Stat Wars\",\n        path: \"/list/starships/\",\n    }\n]\n\nexport default class StarWarsHome extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n        };\n    }\n\n    componentDidMount() {\n    }\n    \n    render() {\n        return (\n            <React.Fragment>\n                <Header title=\"Star Wars\" canBack={false}/>\n                {\n                    LISTS.map((item, index) => (\n                        <ItemCell key={index} data={item} object={{}}/>\n                    ))\n                }\n            </React.Fragment>\n        );\n    }\n}","import './App.css';\nimport { gql, ApolloProvider, ApolloClient, InMemoryCache } from '@apollo/client';\nimport { relayStylePagination } from \"@apollo/client/utilities\"\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport StarWarsList from './screens/StarWarsList';\nimport StarWarsDetail from './screens/StarWarsDetail';\nimport StarWarsHome from './screens/StarWarsHome';\n\n\nconst cache = new InMemoryCache({\n  typePolicies: {\n    Query: {\n      fields: {\n        allPeople: relayStylePagination(),\n        allStarships: relayStylePagination(),\n      },\n    },\n  },\n});\n\n\nconst client = new ApolloClient({\n  uri: 'http://localhost:8000/graphql',\n  /* uri: 'https://swapi-graphql.netlify.app/.netlify/functions/index', */\n  cache: cache\n});\n\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <BrowserRouter>\n        <div className=\"App\">\n          <Switch>\n            <Route exact path=\"/graphql-mode\" component={StarWarsHome}/>\n            <Route exact path=\"/graphql-mode/list/:object\" component={StarWarsList}/>\n            <Route exact path=\"/graphql-mode/detail/:object/:id\" component={StarWarsDetail}/>\n          </Switch>\n        </div>\n      </BrowserRouter>\n    </ApolloProvider>\n\n    \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}